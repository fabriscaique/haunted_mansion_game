import time
import sys
import random

# A bit of delay for imersive presentation in the text
# This whole cell is a small contribution from Mr. ChatGPT
def slow_print(text, delay = 0.05):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()

life_points = 10 
# Global for is_alive(), use_potion(), trap()
# I ensured to list were I globally called this variable to aid in Bug treatments

# Function for Luck
# It simply returns a random number between 0 and 100
def luck():    
    return random.randint(0,100)

# Function to check if player is alive
# Also very simple, if the life points are bigger than zero, the return value is True

def is_alive():
    global life_points # This ensures Python will check and manage a globally existing variable for life points
    if life_points > 0:
        return True
    else:
        return False

# Inventory starts as an ampty list
# I will first try it as a list so we can repeat elements inside it, but we're gonna have mainly potions by now
inventory = list()

# Function to use a potion
def use_potion():
    global life_points, inventory # This ensures Python will check for variables outside this function
    if len(inventory) == 1: # For grammatical reasons, we check if the message should be singular or plural
        # let's start by setting the messages should the lenght of the inventory equals 1 single potion
        slow_print(f'You have {len(inventory)} potion') # Message for a single potion in inventory
        self_heal = input("Use it? (yes or no)").lower() # Lowercase function for the player input
        if self_heal == "yes": # Positive answer
            life_points = 10 # I had no idea how to add life points without exceding the max amount of 10
            # For this reason, potions will fully heal the character by simply reseting healh to 10
            inventory.remove('potion') # Don't forget to remove a potion from the inventory, so players won't exploit the game xD
            slow_print("Your health has been restored!") # Sooth the poor player's soul by letting him/her know it worked out
        else:
            slow_print("It's your funeral...") # Should the player decide NOT to use his SINGLE potion
    elif len(inventory) > 1: # Same thing as before, but should we have 2 or more potions, we adjust the message to match correct grammar
        slow_print(f'You have {len(inventory)} potions')
        self_heal = input("Use a potion? (yes or no)").lower()
        if self_heal == "yes":
            life_points = 10
            inventory.remove('potion')
            slow_print("Your health has been restored!")
        else:
            slow_print("It's your funeral...") # Should the player decide NOT to use his/her many potions for God-knows-what-reason
    else:
        slow_print("Looks like your inventory is empty...") # This will be printed if the lenght of the inventory is neither 1 nor higher than 1.

# Function for taking damage
def damage_hit():
    global life_points # call for global variable
    slow_print("""
    You have been damaged by 2 points.""") # let player know
    life_points -= 2 # Hit 'em hard! Reduce total life poitns by 2
    if is_alive() is True: # Check if the player is alive before... (next comment)
        slow_print(f'Remaining life points: {life_points}') # Let the player know current health status
    else: # This activates if the return value for is_alive() is not True
        slow_print("You joined the Solomon family in the afterlife") # Funny message, attempt for player not to get too salty when facing defeat
        slow_print("G A M E O V E R", delay = 0.2) # Not much to say here, game is over, let the player know

# Function for falling into a trap
def trap():
    global life_points, inventory # Have Python check and modify these variables outside the function 
    slow_print("""
    Oh, no! You fell into a trap!
    Your health was damaged by 2 points!""") # Start by letting the player know he/she screwed over
    damage_hit()
    use_potion() # Call the potions to give the poor soul a chance

# Function for choosing right in the mansion navigation
def random_event():
    global inventory
    if luck() >= 50: # Should value randomly generated by the luck function is above 50
        inventory.append('potion') # Add a potion to the inventory
        slow_print("You've found a Potion! It was added to your inventory!") # Inform the player about inventory changes
        # Inform the player about current inventory status, small loop to fit grammar scenarios
        if len(inventory) == 1: # Should message be printed in singular form
            slow_print(f'You currently have {len(inventory)} potion')
        else: # Should message be printed in plural form
            slow_print(f'You currently have {len(inventory)} potions')
    else: # Activate trap function if the value generated by luck function is below 50
        trap()

def flee_attempt():
    if luck() >= 50:
        slow_print("""
        You sucessfuly dart down the corridor, your heart racing with you.
        The ghost's wail fades into the distance as you escape it's cold grasp,
        leaving you breathless, but safe...
        For now...""")
        return True
    else:
        slow_print("""
        You cannot outrun the dead!
        You feel a chilling touch closing in,
        there is no escaping the icy grip this time...""")
        damage_hit()
        battle_ghost()

def attack_ghost():
    slow_print("""
    You attacked the dead!""")
    if luck() >= 50:
        slow_print("""
        You somehow managed to sucessfuly land your hit on a ghost!
        The shattered figure dissolves into the shadows with a final anguished scream...""")
        return True
    else:
        slow_print("""
        Your blow fades into it's ethereal form.
        You feel an icy touch sending waves of pain.""")
        damage_hit()
        return False

def battle_ghost():
    global life_points, inventory

    while True:
        try:
            battle_move = int(input("""
            Press [1] to attack the dead
            Press [2] to run
            Press [9] to use a Potion\n"""))
    
            if battle_move == 1:
                if attack_ghost() is True:
                    return True
                    break
            
            elif battle_move == 2:
                if flee_attempt() is True:
                    return False
                    break
        
            elif battle_move == 9:
                use_potion()
        
        except ValueError:
            slow_print("""
            Are you so afraid that you missed the right keys...?\n""")

def encounter_ghost():
    if luck() >= 50:
        slow_print("""
        Nothing but an eerie silence roams through this corridor...
        You gather all your courage and continue your way.""")
    else:
        slow_print("""
        A frigid wind howls through the corridor, as a ghostly figure materializes.
        It's hollow eyes glows with malevolent fire, and it's hand points towards you.
        A blood-curdling wail fills the air, and the darkness seems to pulse with dread.""")
        combat_decision = input("\nFight the dead? (yes or no):").lower()
        if combat_decision == 'yes':
            if battle_ghost() is True:
                return True
        else:
            if flee_attempt() is True:
                return False
            else:
                battle_ghost()

def intro_text():
    slow_print("""
    The moon is pale,
    The gate swings wide.
    The shadows whisper
    There's nowhere to hide.

    The mansion awaits
    With breathless dread.
    Where souls went lost,
    And hope is dead...""")

def run_mansion():
    
    global life_points, inventory
    
    intro_text()
    
    while True: # The game should be inside a while loop as it will be recursively prompting the player
        
        if not is_alive(): # Check if player is alive
            slow_print("You joined the Solomon family in the afterlife") # Funny message, attempt for player not to get too salty when facing defeat
            slow_print("G A M E O V E R", delay = 0.2) # Not much to say here, it's over, let the player know
            break # breakes the Mansion loop and finishes the game
            
        slow_print("""
        Two corridors lies ahead: one to the right, one to the left...
        Which will you choose?\n""") # Present player with choices
        
        try: # Open a try loop, it will keep prompting the player for the same options until it's broken
            nav_direction = int(input("""
            Press [1] to go left.
            Press [2] to go right.
            Press [9] to check inventory.\n""")) # Invite player input
            # I made it numerical because I think it's easier to handle codewise and also for player comfort
            
            if nav_direction == 1: # If player chooses to go left
                random_event() # Random event starts based on the pre-set function
                
            elif nav_direction == 2: # If player chooses to go right
                if encounter_ghost() is True: # A ghost encounter is initiated, it's function is set to return a True value should the player win
                    if luck() >= 82: # Based on luck, there is a 25% chance the player will find the key after defeating the ghost
                        slow_print("""
                        in the dust, your fingers brush against something different...
                        A gleaming key, humming with a strange power!
                        This is it! Your way out of the nightmare...\n""")
                        print()
                        slow_print("""
                        You have beaten the Haunted Mansion! Congratulations!\n""") # Finding the key automatically finishes the game
                        break # Breakes the Mansion loop and finishes the game            
                
            elif nav_direction == 9:
                use_potion() # I thought that it could be nice to have an extra option to handle inventory and health outside of conflict

            # Some validation entries to handle misinput
            else:
                slow_print("Are you so afraid that you missed the right keys...?\n")
        except ValueError:
            slow_print("Are you so afraid that you missed the right keys...?\n")

run_mansion()